import { supabase } from "@/integrations/supabase/client";

interface BotResponse {
  type: "turnos" | "ensayos" | "canciones" | "general";
  message: string;
}

export class ArcanaBot {
  static async processMessage(message: string, roomId: string, userId: string): Promise<BotResponse | null> {
    // Detecci√≥n m√°s flexible de menciones
    const mentionsBot = /arcana|@arcana|bot|asistente/i.test(message);

    if (!mentionsBot) {
      console.log("ARCANA: Mensaje no contiene menci√≥n");
      return null;
    }

    // Limpiar mensaje m√°s efectivamente
    const cleanMessage = message
      .replace(/@arcana\s*:?\s*/gi, "")
      .replace(/arcana\s*:?\s*/gi, "")
      .replace(/^(?:bot|asistente)\s*/gi, "")
      .replace(/^\s*[:,-]\s*/, "")
      .trim()
      .toLowerCase();

    console.log("ARCANA procesando mensaje limpio:", cleanMessage);

    // Si est√° vac√≠o o es saludo
    if (!cleanMessage || /^(hola|hi|hey|buenos|buenas|saludos)/i.test(cleanMessage)) {
      return this.handleGeneralQuery("ayuda");
    }

    // Analizar el tipo de consulta
    if (this.isTurnosQuery(cleanMessage)) {
      console.log("ARCANA detect√≥ consulta de turnos");
      // Verificar si est√° preguntando por otro usuario
      const otherUser = this.extractUserFromQuery(cleanMessage);
      if (otherUser) {
        return await this.handleTurnosQueryForUser(otherUser);
      } else {
        return await this.handleTurnosQuery(userId);
      }
    } else if (this.isEnsayosQuery(cleanMessage)) {
      console.log("ARCANA detect√≥ consulta de ensayos");
      return await this.handleEnsayosQuery();
    } else if (this.isCancionesQuery(cleanMessage)) {
      console.log("ARCANA detect√≥ consulta de canciones");
      return await this.handleCancionesQuery(cleanMessage);
    } else if (this.isSeleccionarCancionQuery(cleanMessage)) {
      console.log("ARCANA detect√≥ consulta de selecci√≥n de canci√≥n");
      return await this.handleSeleccionarCancionQuery(cleanMessage);
    } else {
      console.log("ARCANA detect√≥ consulta general");
      return this.handleGeneralQuery(cleanMessage);
    }
  }

  private static extractUserFromQuery(message: string): string | null {
    // Primero verificar si es una consulta propia
    const selfQueryPatterns = [
      /(cuando\s+)?me\s+toca/i,
      /mi\s+(pr[o√≥]ximo\s+)?turno/i,
      /pr[o√≥]ximo\s+turno/i,
      /\bme\b.*\btoca\b/i,
      /yo\s+(quiero\s+)?cantar/i,
    ];

    for (const pattern of selfQueryPatterns) {
      if (pattern.test(message)) {
        console.log("ARCANA detect√≥ consulta propia, no buscar otro usuario");
        return null;
      }
    }

    // Patrones mejorados para detectar nombres de otros usuarios
    const patterns = [
      /(?:turno\s+(?:de|para)|le\s+toca\s+a|cuando\s+canta)\s+([a-z√°√©√≠√≥√∫√±√º\s]{3,})/i,
      /(?:toca\s+a)\s+([a-z√°√©√≠√≥√∫√±√º\s]{3,})/i,
      /(?:y\s+)?([a-z√°√©√≠√≥√∫√±√º\s]{3,})\s+(?:cu[√°a]ndo\s+le\s+toca|pr[o√≥]ximo\s+turno)/i,
    ];

    for (const pattern of patterns) {
      const match = message.match(pattern);
      if (match && match[1]) {
        const extractedName = match[1].trim();

        // Filtrar palabras comunes m√°s exhaustivamente
        const commonWords = [
          "me",
          "mi",
          "cuando",
          "que",
          "el",
          "la",
          "un",
          "una",
          "este",
          "esta",
          "ese",
          "esa",
          "aquel",
          "aquella",
          "cantar",
          "toca",
          "turno",
          "pr√≥ximo",
          "siguiente",
          "ensayo",
          "canci√≥n",
          "cancion",
          "arcana",
          "por",
          "para",
          "de",
          "del",
          "al",
          "y",
          "o",
          "u",
          "con",
          "sin",
          "los",
          "las",
        ];

        const words = extractedName.toLowerCase().split(/\s+/);
        const isValidName = words.some((word) => word.length > 2 && !commonWords.includes(word));

        if (isValidName && extractedName.length >= 3) {
          console.log("ARCANA extrajo nombre v√°lido:", extractedName);
          return extractedName;
        }
      }
    }

    return null;
  }

  private static async handleTurnosQueryForUser(userName: string): Promise<BotResponse> {
    try {
      console.log("ARCANA consultando turnos para:", userName);

      // B√∫squeda m√°s flexible de miembros
      const searchTerms = userName
        .toLowerCase()
        .split(" ")
        .filter((term) => term.length > 2)
        .map((term) => term.normalize("NFD").replace(/[\u0300-\u036f]/g, "")); // Remover acentos

      let query = supabase.from("members").select("nombres, apellidos, email").eq("is_active", true);

      // Construir condiciones de b√∫squeda
      const searchConditions = [];
      for (const term of searchTerms) {
        searchConditions.push(`nombres.ilike.%${term}%`);
        searchConditions.push(`apellidos.ilike.%${term}%`);
      }

      const { data: members, error } = await query.or(searchConditions.join(",")).limit(5);

      if (error) throw error;

      if (!members || members.length === 0) {
        return {
          type: "turnos",
          message: `ü§ñ No encontr√© al integrante "${userName}" en nuestro sistema.\n\nüí° **Sugerencias:**\n‚Ä¢ Verifica la ortograf√≠a del nombre\n‚Ä¢ Usa nombre y apellido si es posible\n‚Ä¢ Consulta la lista de **[Integrantes Activos](/integrantes)**`,
        };
      }

      // Si hay m√∫ltiples coincidencias
      if (members.length > 1) {
        const opciones = members.map((m, i) => `${i + 1}. **${m.nombres} ${m.apellidos}**`).join("\n");

        return {
          type: "turnos",
          message: `ü§ñ Encontr√© varios integrantes:\n\n${opciones}\n\nüí° Por favor especifica mejor el nombre. Ejemplo: "ARCANA cu√°ndo le toca a **${members[0].nombres} ${members[0].apellidos.split(" ")[0]}**"`,
        };
      }

      // Un solo resultado
      const member = members[0];
      const fullName = `${member.nombres} ${member.apellidos}`;
      return await this.searchUserInServices(fullName);
    } catch (error) {
      console.error("Error consultando turnos para otro usuario:", error);
      return {
        type: "turnos",
        message:
          "ü§ñ Disculpa, hubo un error consultando los turnos. Por favor intenta nuevamente o consulta la agenda ministerial directamente.\n\nüîó **[Ver Agenda Ministerial](/agenda)**",
      };
    }
  }

  private static isTurnosQuery(message: string): boolean {
    const turnosPatterns = [
      /turno/,
      /cu[√°a]ndo\s+(?:me\s+)?toca/,
      /pr[o√≥]ximo\s+turno/,
      /cu[√°a]ndo\s+canto/,
      /me\s+toca\s+cantar/,
      /cu[√°a]ndo\s+me\s+toca\s+cantar/,
      /agenda\s+personal/,
      /mis\s+turnos/,
    ];

    return turnosPatterns.some((pattern) => pattern.test(message));
  }

  private static isEnsayosQuery(message: string): boolean {
    const ensayosKeywords = ["ensayo", "ensayos", "pr√°ctica", "practicas", "rehearsal"];
    return ensayosKeywords.some((keyword) => message.includes(keyword));
  }

  private static isCancionesQuery(message: string): boolean {
    const cancionesKeywords = ["canci√≥n", "cancion", "canciones", "buscar", "repertorio", "m√∫sica", "song"];
    return cancionesKeywords.some((keyword) => message.includes(keyword));
  }

  private static isSeleccionarCancionQuery(message: string): boolean {
    const seleccionKeywords = ["seleccionar", "elegir", "a√±adir", "agregar", "para servicio", "para pr√≥ximo servicio"];
    const hasSeleccionKeyword = seleccionKeywords.some((keyword) => message.includes(keyword));
    const hasCancionKeyword = message.includes("canci√≥n") || message.includes("cancion");
    return hasSeleccionKeyword && hasCancionKeyword;
  }

  private static async handleSeleccionarCancionQuery(query: string): Promise<BotResponse> {
    try {
      console.log("ARCANA procesando selecci√≥n de canci√≥n:", query);

      // Extraer el nombre de la canci√≥n del query
      const patterns = [
        /seleccionar\s+([a-z√°√©√≠√≥√∫√±\s]+)\s+para/i,
        /elegir\s+([a-z√°√©√≠√≥√∫√±\s]+)\s+para/i,
        /a√±adir\s+([a-z√°√©√≠√≥√∫√±\s]+)\s+para/i,
        /agregar\s+([a-z√°√©√≠√≥√∫√±\s]+)\s+para/i,
        /(?:seleccionar|elegir|a√±adir|agregar)\s+(.+)/i,
      ];

      let nombreCancion = null;
      for (const pattern of patterns) {
        const match = query.match(pattern);
        if (match && match[1]) {
          nombreCancion = match[1].trim();
          break;
        }
      }

      if (!nombreCancion || nombreCancion.length < 3) {
        return {
          type: "canciones",
          message:
            'ü§ñ Para seleccionar una canci√≥n especifica el nombre completo. Ejemplo: "ARCANA seleccionar Como Lluvia para pr√≥ximo servicio"',
        };
      }

      // Buscar la canci√≥n en el repertorio
      const { data: canciones, error } = await supabase
        .from("songs")
        .select("*")
        .or(`title.ilike.%${nombreCancion}%,artist.ilike.%${nombreCancion}%`)
        .eq("is_active", true)
        .limit(3);

      if (error) {
        console.error("Error buscando canci√≥n:", error);
        return {
          type: "canciones",
          message: "ü§ñ Hubo un error buscando la canci√≥n. Intenta nuevamente.",
        };
      }

      if (!canciones || canciones.length === 0) {
        return {
          type: "canciones",
          message: `ü§ñ No encontr√© la canci√≥n "${nombreCancion}" en nuestro repertorio.\n\nüí° Puedes:\n‚Ä¢ üîç [Buscar en el Repertorio](/repertorio-musical?search=${encodeURIComponent(nombreCancion)})\n‚Ä¢ ‚ûï [Agregar Nueva Canci√≥n](/repertorio-musical?tab=add)`,
        };
      }

      // Si hay m√∫ltiples canciones, mostrar opciones
      if (canciones.length > 1) {
        let mensaje = `üéµ Encontr√© ${canciones.length} canciones similares a "${nombreCancion}":\n\n`;
        canciones.forEach((cancion, index) => {
          mensaje += `${index + 1}. **${cancion.title}**`;
          if (cancion.artist) mensaje += ` - ${cancion.artist}`;
          mensaje += `\nüìñ [Ver en Repertorio](/repertorio-musical?search=${encodeURIComponent(cancion.title)})\n\n`;
        });
        mensaje += "ü§ñ Para seleccionar una canci√≥n espec√≠fica para un servicio:\n";
        mensaje += "1. üìÖ Ve a la **[Agenda Ministerial](/agenda)**\n";
        mensaje += "2. üéµ Selecciona el servicio deseado\n";
        mensaje += "3. ‚ûï Agrega la canci√≥n desde ah√≠\n\n";
        mensaje += 'üí¨ O especifica mejor el nombre: "ARCANA seleccionar [t√≠tulo exacto] para pr√≥ximo servicio"';

        return {
          type: "canciones",
          message: mensaje,
        };
      }

      // Una sola canci√≥n encontrada
      const cancion = canciones[0];
      let mensaje = `üéµ **Canci√≥n encontrada:** ${cancion.title}\n`;
      if (cancion.artist) mensaje += `üé§ **Artista:** ${cancion.artist}\n`;
      if (cancion.genre) mensaje += `üéº **G√©nero:** ${cancion.genre}\n`;
      if (cancion.key_signature) mensaje += `üéπ **Tono:** ${cancion.key_signature}\n\n`;

      mensaje += "ü§ñ **Para seleccionar esta canci√≥n para un servicio:**\n";
      mensaje += "1. üìÖ Ve a la **[Agenda Ministerial](/agenda)**\n";
      mensaje += "2. üéµ Busca el servicio donde quieres incluirla\n";
      mensaje += "3. ‚ûï Agrega la canci√≥n desde el formulario del servicio\n\n";
      mensaje += `üìñ [Ver en Repertorio](/repertorio-musical?search=${encodeURIComponent(cancion.title)})\n`;

      // Agregar enlaces a YouTube/Spotify si est√°n disponibles
      if (cancion.youtube_link || cancion.spotify_link) {
        mensaje += "\nüîó **Enlaces:**\n";
        if (cancion.youtube_link) mensaje += `‚Ä¢ [üé• Ver en YouTube](${cancion.youtube_link})\n`;
        if (cancion.spotify_link) mensaje += `‚Ä¢ [üéß Escuchar en Spotify](${cancion.spotify_link})\n`;
      }

      return {
        type: "canciones",
        message: mensaje,
      };
    } catch (error) {
      console.error("Error en selecci√≥n de canci√≥n:", error);
      return {
        type: "canciones",
        message:
          "ü§ñ Hubo un error procesando tu solicitud. Para seleccionar canciones visita la **[Agenda Ministerial](/agenda)**.",
      };
    }
  }

  private static async handleTurnosQuery(userId: string): Promise<BotResponse> {
    try {
      console.log("ARCANA consultando turnos para usuario:", userId);

      // Buscar informaci√≥n del usuario en perfiles
      const { data: profile, error: profileError } = await supabase
        .from("profiles")
        .select("full_name")
        .eq("id", userId)
        .single();

      if (profileError || !profile) {
        console.log("No se encontr√≥ perfil, buscando en tabla members");

        // Buscar en la tabla members usando el email del usuario autenticado
        const {
          data: { user },
          error: userError,
        } = await supabase.auth.getUser();

        if (userError || !user) {
          return {
            type: "turnos",
            message: "ü§ñ No pude identificar tu usuario. Aseg√∫rate de estar autenticado correctamente.",
          };
        }

        // Buscar en members por email
        const { data: member, error: memberError } = await supabase
          .from("members")
          .select("nombres, apellidos")
          .eq("email", user.email)
          .single();

        if (memberError || !member) {
          return {
            type: "turnos",
            message:
              "ü§ñ No encontr√© tu informaci√≥n en el sistema de integrantes. Contacta a tu l√≠der para actualizar tus datos.",
          };
        }

        // Usar el nombre completo del member
        const fullName = `${member.nombres} ${member.apellidos}`;
        return await this.searchUserInServices(fullName);
      }

      // Usar el nombre del perfil
      return await this.searchUserInServices(profile.full_name);
    } catch (error) {
      console.error("Error consultando turnos:", error);
      return {
        type: "turnos",
        message:
          "ü§ñ Disculpa, hubo un error consultando tus turnos. Intenta nuevamente o consulta directamente la agenda ministerial.",
      };
    }
  }

  private static async searchUserInServices(fullName: string): Promise<BotResponse> {
    try {
      console.log("Buscando servicios para:", fullName);

      // Normalizar el nombre para b√∫squeda
      const normalizedName = fullName.toLowerCase().trim();
      const nameParts = normalizedName.split(/\s+/).filter((part) => part.length > 2);

      // Buscar eventos futuros y recientes (60 d√≠as)
      const today = new Date();
      const sixtyDaysAgo = new Date(today);
      sixtyDaysAgo.setDate(today.getDate() - 60);

      const { data: eventos, error: eventosError } = await supabase
        .from("services")
        .select("*")
        .gte("service_date", sixtyDaysAgo.toISOString().split("T")[0])
        .order("service_date", { ascending: true })
        .limit(100);

      if (eventosError) {
        console.error("Error consultando eventos:", eventosError);
        return {
          type: "turnos",
          message: "ü§ñ Hubo un error consultando la agenda ministerial. Intenta nuevamente.",
        };
      }

      console.log("Total de eventos encontrados:", eventos?.length || 0);

      if (!eventos || eventos.length === 0) {
        return {
          type: "turnos",
          message: "ü§ñ No hay servicios programados en la agenda ministerial.",
        };
      }

      // B√∫squeda m√°s inteligente en los eventos
      const eventosConUsuario = eventos.filter((evento) => {
        const searchText = [
          evento.leader || "",
          evento.description || "",
          evento.notes || "",
          evento.title || "",
          evento.special_activity || "",
          evento.choir_breaks || "",
          evento.assigned_members || "",
        ]
          .join(" ")
          .toLowerCase();

        // Buscar coincidencias parciales de cada parte del nombre
        const hasNameMatch = nameParts.some((part) => {
          if (part.length < 3) return false;

          // Buscar coincidencia exacta de palabra
          const regex = new RegExp(`\\b${part}\\b`, "i");
          return regex.test(searchText);
        });

        // Tambi√©n buscar el nombre completo
        const hasFullNameMatch = searchText.includes(normalizedName);

        return hasNameMatch || hasFullNameMatch;
      });

      console.log("Eventos con usuario encontrados:", eventosConUsuario.length);

      // Separar eventos pasados y futuros
      const today_str = today.toISOString().split("T")[0];
      const eventosPasados = eventosConUsuario.filter((evento) => evento.service_date < today_str);
      const eventosFuturos = eventosConUsuario.filter((evento) => evento.service_date >= today_str);

      // Si hay eventos futuros, mostrar el pr√≥ximo
      if (eventosFuturos.length > 0) {
        const proximoEvento = eventosFuturos[0];
        const fecha = new Date(proximoEvento.service_date).toLocaleDateString("es-ES", {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
        });

        let mensaje = `üéµ **¬°Hola ${fullName}!**\n\nTu pr√≥ximo turno es:\n\nüìÖ **${proximoEvento.title}**\nüóìÔ∏è ${fecha}\nüìç ${proximoEvento.location || "Ubicaci√≥n por confirmar"}`;

        // Agregar informaci√≥n adicional
        if (proximoEvento.service_time) {
          mensaje += `\n‚è∞ Hora: ${proximoEvento.service_time}`;
        }

        if (proximoEvento.special_activity) {
          mensaje += `\nüéØ Actividad: ${proximoEvento.special_activity}`;
        }

        if (proximoEvento.notes) {
          mensaje += `\nüìù Notas: ${proximoEvento.notes}`;
        }

        mensaje += "\n\n¬°Prep√°rate para alabar al Se√±or! üôè";

        // Si hay m√°s turnos futuros
        if (eventosFuturos.length > 1) {
          const otrosEventos = eventosFuturos
            .slice(1)
            .map((evento) => `‚Ä¢ ${new Date(evento.service_date).toLocaleDateString("es-ES")} - ${evento.title}`)
            .join("\n");

          mensaje += `\n\nüìã **Tambi√©n tienes:**\n${otrosEventos}`;
        }

        return {
          type: "turnos",
          message: mensaje,
        };
      }

      // Si no hay futuros pero s√≠ pasados
      if (eventosPasados.length > 0) {
        const ultimoEvento = eventosPasados[eventosPasados.length - 1];
        const fecha = new Date(ultimoEvento.service_date).toLocaleDateString("es-ES", {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
        });

        return {
          type: "turnos",
          message: `üéµ **Hola ${fullName}!**\n\nTu √∫ltimo turno registrado fue:\n\nüìÖ **${ultimoEvento.title}**\nüóìÔ∏è ${fecha}\nüìç ${ultimoEvento.location || "Ubicaci√≥n por confirmar"}\n\nüí° No tienes turnos futuros programados. Consulta con tu l√≠der de grupo para pr√≥ximos servicios.`,
        };
      }

      // Si no se encontr√≥ ning√∫n evento
      return {
        type: "turnos",
        message: `ü§ñ **Hola ${fullName}!**\n\nNo encontr√© turnos programados para ti en los pr√≥ximos servicios.\n\nüí° **Sugerencias:**\n‚Ä¢ Verifica que tu nombre est√© correctamente escrito en el sistema\n‚Ä¢ Consulta con tu l√≠der de grupo sobre pr√≥ximas asignaciones\n‚Ä¢ Revisa la **[Agenda Ministerial completa](/agenda)**`,
      };
    } catch (error) {
      console.error("Error buscando en servicios:", error);
      return {
        type: "turnos",
        message:
          "ü§ñ Disculpa, hubo un error consultando tus turnos. Intenta nuevamente o consulta directamente la agenda ministerial.\n\nüîó **[Ver Agenda Ministerial](/agenda)**",
      };
    }
  }

  private static async handleEnsayosQuery(): Promise<BotResponse> {
    try {
      console.log("ARCANA consultando ensayos - respuesta fija para viernes");

      // Obtener la fecha actual
      const today = new Date();
      const currentDay = today.getDay(); // 0 = Domingo, 5 = Viernes

      let nextFriday: Date;

      if (currentDay === 5) {
        // Si hoy es viernes, usar la fecha de hoy
        nextFriday = today;
      } else {
        // Calcular el pr√≥ximo viernes
        const daysUntilFriday = (5 - currentDay + 7) % 7;
        nextFriday = new Date(today);
        nextFriday.setDate(today.getDate() + daysUntilFriday);
      }

      // Formatear la fecha en espa√±ol
      const fechaEnsayo = nextFriday.toLocaleDateString("es-ES", {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
      });

      const mensaje = `üéµ **Pr√≥ximo Ensayo:**\n\nüìÖ ${fechaEnsayo}\n‚è∞ 07:00 p.m. a 09:00 p.m.\nüìç Ubicaci√≥n habitual de ensayo\n\n¬°No faltes! La alabanza requiere preparaci√≥n. üôè`;

      return {
        type: "ensayos",
        message: mensaje,
      };
    } catch (error) {
      console.error("Error generando respuesta de ensayos:", error);
      return {
        type: "ensayos",
        message:
          "ü§ñ Disculpa, hubo un error consultando los ensayos. Los ensayos son todos los viernes de 07:00 p.m. a 09:00 p.m.",
      };
    }
  }

  private static async handleCancionesQuery(query: string): Promise<BotResponse> {
    try {
      console.log("ARCANA consultando canciones con query:", query);

      // Extraer t√©rminos de b√∫squeda
      const searchTerms = query.replace(/canci√≥n|cancion|canciones|buscar|repertorio|m√∫sica|song/gi, "").trim();

      if (!searchTerms) {
        return {
          type: "canciones",
          message:
            'ü§ñ Para buscar canciones, especifica el nombre o categor√≠a. Ejemplo: "ARCANA buscar alabanza" o "ARCANA canci√≥n esp√≠ritu santo"',
        };
      }

      const { data: canciones, error } = await supabase
        .from("songs")
        .select("*")
        .or(
          `title.ilike.%${searchTerms}%,artist.ilike.%${searchTerms}%,genre.ilike.%${searchTerms}%,tags.cs.{${searchTerms}}`,
        )
        .eq("is_active", true)
        .limit(5);

      if (error) {
        console.error("Error buscando canciones:", error);
        return {
          type: "canciones",
          message: "ü§ñ Disculpa, hubo un error buscando canciones. Consulta directamente el repertorio musical.",
        };
      }

      console.log("Canciones encontradas:", canciones?.length || 0);

      if (!canciones || canciones.length === 0) {
        return {
          type: "canciones",
          message: `ü§ñ No encontr√© canciones con "${searchTerms}". Puedes buscar por t√≠tulo, artista, g√©nero o etiquetas en nuestro repertorio.\n\nüîó **[Ver Repertorio Completo](/repertorio-musical)**`,
        };
      }

      let mensaje = `üéµ **Encontr√© ${canciones.length} canci√≥n(es) con "${searchTerms}":**\n\n`;

      canciones.forEach((cancion, index) => {
        mensaje += `${index + 1}. **${cancion.title}**\n`;
        if (cancion.artist) mensaje += `üé§ ${cancion.artist}\n`;
        if (cancion.genre) mensaje += `üéº ${cancion.genre}\n`;
        if (cancion.key_signature) mensaje += `üéπ Tono: ${cancion.key_signature}\n`;
        if (cancion.difficulty_level) {
          const difficulty = ["", "Muy F√°cil", "F√°cil", "Intermedio", "Dif√≠cil", "Muy Dif√≠cil"][
            cancion.difficulty_level
          ];
          mensaje += `‚≠ê Dificultad: ${difficulty}\n`;
        }

        // Agregar enlaces √∫tiles
        const links = [];
        if (cancion.youtube_link) links.push(`[üé• YouTube](${cancion.youtube_link})`);
        if (cancion.spotify_link) links.push(`[üéß Spotify](${cancion.spotify_link})`);
        links.push(`[üìñ Ver en Repertorio](/repertorio-musical?search=${encodeURIComponent(cancion.title)})`);

        if (links.length > 0) {
          mensaje += `üîó ${links.join(" ‚Ä¢ ")}\n`;
        }

        mensaje += "\n";
      });

      // Agregar opciones adicionales
      mensaje += "üí° **Opciones disponibles:**\n";
      mensaje += "‚Ä¢ üìñ [Ver Repertorio Completo](/repertorio-musical)\n";
      mensaje += "‚Ä¢ ‚ûï [Agregar Nueva Canci√≥n](/repertorio-musical?tab=add)\n";
      mensaje += "‚Ä¢ üóìÔ∏è Para seleccionar una canci√≥n para un servicio, visita la **Agenda Ministerial**\n";
      mensaje += '\nüí¨ Tambi√©n puedes preguntar: "ARCANA seleccionar [nombre canci√≥n] para pr√≥ximo servicio"';

      return {
        type: "canciones",
        message: mensaje,
      };
    } catch (error) {
      console.error("Error buscando canciones:", error);
      return {
        type: "canciones",
        message:
          "ü§ñ Disculpa, hubo un error buscando canciones. Consulta directamente el repertorio musical.\n\nüîó **[Ver Repertorio Musical](/repertorio-musical)**",
      };
    }
  }

  private static async handleGeneralQuery(query: string): Promise<BotResponse> {
    console.log("ARCANA manejando consulta general:", query);

    // Detectar consultas de cumplea√±os
    if (query.includes("cumplea√±os") || query.includes("cumpleanos")) {
      return await this.handleBirthdayQuery(query);
    }

    // Detectar consultas b√≠blicas
    if (
      query.includes("vers√≠culo") ||
      query.includes("versiculo") ||
      query.includes("biblia") ||
      query.includes("cita b√≠blica")
    ) {
      return this.handleBibleQuery(query);
    }

    // Respuestas predefinidas para consultas generales relacionadas con el ministerio
    const responses = {
      valores:
        "ü§ñ Nuestros valores fundamentales son: **Fe, Adoraci√≥n, Comunidad, Servicio y Excelencia**. Cada integrante del ministerio debe reflejar estos valores en su vida y servicio.",
      horarios:
        "ü§ñ Los horarios regulares son: Ensayos los mi√©rcoles 7:00 PM, Servicio domingo 9:00 AM. Para horarios espec√≠ficos, consulta la agenda ministerial.",
      contacto:
        "ü§ñ Para contactar a los l√≠deres del ministerio, puedes usar este sistema de comunicaci√≥n o consultar en la secci√≥n de Integrantes.",
      ayuda: `ü§ñ **¬°Hola! Soy ARCANA, tu asistente del ministerio ADN Arca de No√©.** ‚ú®

**¬øEn qu√© puedo ayudarte?**

üéµ **TURNOS Y AGENDA**
‚Ä¢ "¬øCu√°ndo me toca cantar?"
‚Ä¢ "¬øCu√°ndo le toca a [nombre]?"
‚Ä¢ "Pr√≥ximo turno"
‚Ä¢ "Mi agenda"

üìÖ **ENSAYOS**
‚Ä¢ "Pr√≥ximo ensayo"
‚Ä¢ "Cu√°ndo es el ensayo"
‚Ä¢ "Horario de ensayos"

üé∂ **CANCIONES Y REPERTORIO**
‚Ä¢ "Buscar [nombre canci√≥n]"
‚Ä¢ "Seleccionar [canci√≥n] para servicio"
‚Ä¢ "Repertorio de alabanza"

üéÇ **CUMPLEA√ëOS**
‚Ä¢ "Cumplea√±os de hoy"
‚Ä¢ "Cumplea√±os del mes"
‚Ä¢ "Cumplea√±os de enero"

üìñ **BIBLIA Y ESPIRITUAL**
‚Ä¢ "Vers√≠culo del d√≠a"
‚Ä¢ "Cita b√≠blica sobre [tema]"

üí° **EJEMPLOS PR√ÅCTICOS:**
‚Ä¢ "ARCANA cu√°ndo me toca cantar"
‚Ä¢ "ARCANA buscar Como Lluvia"
‚Ä¢ "ARCANA cu√°ndo le toca a Armando Noel"
‚Ä¢ "ARCANA pr√≥ximo ensayo"
‚Ä¢ "ARCANA cumplea√±os de hoy"
‚Ä¢ "ARCANA vers√≠culo del d√≠a"

¬°Estoy aqu√≠ para servirte! üôèüéµ`,
    };

    // Buscar coincidencias en las consultas
    for (const [key, response] of Object.entries(responses)) {
      if (query.includes(key)) {
        console.log("ARCANA encontr√≥ respuesta para:", key);
        return { type: "general", message: response };
      }
    }

    // Respuesta por defecto
    console.log("ARCANA usando respuesta por defecto");
    return {
      type: "general",
      message:
        'ü§ñ No entend√≠ tu consulta. Escribe "ARCANA ayuda" para ver todas las opciones disponibles.\n\nüí° Puedo ayudarte con:\n‚Ä¢ Turnos de canto\n‚Ä¢ Informaci√≥n de ensayos\n‚Ä¢ B√∫squeda de canciones\n‚Ä¢ Selecci√≥n de repertorio\n‚Ä¢ Cumplea√±os del ministerio\n‚Ä¢ Vers√≠culos b√≠blicos',
    };
  }

  private static async handleBirthdayQuery(query: string): Promise<BotResponse> {
    const today = new Date();
    const currentMonth = today.getMonth() + 1;
    const currentDay = today.getDate();

    try {
      // Buscar cumplea√±os de hoy
      if (query.includes("hoy") || query.includes("d√≠a")) {
        const { data: birthdays, error } = await supabase
          .from("members")
          .select("nombres, apellidos, fecha_nacimiento")
          .eq("is_active", true)
          .not("fecha_nacimiento", "is", null);

        if (error) throw error;

        const todayBirthdays =
          birthdays?.filter((member) => {
            if (!member.fecha_nacimiento) return false;
            const birthDate = new Date(member.fecha_nacimiento);
            return birthDate.getMonth() + 1 === currentMonth && birthDate.getDate() === currentDay;
          }) || [];

        if (todayBirthdays.length === 0) {
          return {
            type: "general",
            message: `üéÇ **Cumplea√±os de hoy (${currentDay}/${currentMonth}):**\n\nüòä No hay cumplea√±os registrados para hoy.\n\nüìÖ **[Ver M√≥dulo de Cumplea√±os](/cumpleanos)** para consultar los pr√≥ximos cumplea√±os del ministerio.\n\n¬°Celebremos juntos! üôè‚ú®`,
          };
        }

        let mensaje = `üéÇ **¬°Cumplea√±os de hoy!** üéâ\n\n`;
        todayBirthdays.forEach((member) => {
          mensaje += `üéà **${member.nombres} ${member.apellidos}**\n`;
        });
        mensaje += `\nüíù ¬°No olvides felicitar a ${todayBirthdays.length > 1 ? "nuestros hermanos" : "nuestro hermano"}!\n\nüìÖ **[Ver m√°s en M√≥dulo de Cumplea√±os](/cumpleanos)**`;

        return { type: "general", message: mensaje };
      }

      // Buscar cumplea√±os del mes
      if (
        query.includes("mes") ||
        query.includes("enero") ||
        query.includes("febrero") ||
        query.includes("marzo") ||
        query.includes("abril") ||
        query.includes("mayo") ||
        query.includes("junio") ||
        query.includes("julio") ||
        query.includes("agosto") ||
        query.includes("septiembre") ||
        query.includes("octubre") ||
        query.includes("noviembre") ||
        query.includes("diciembre")
      ) {
        const { data: birthdays, error } = await supabase
          .from("members")
          .select("nombres, apellidos, fecha_nacimiento")
          .eq("is_active", true)
          .not("fecha_nacimiento", "is", null);

        if (error) throw error;

        const monthBirthdays =
          birthdays
            ?.filter((member) => {
              if (!member.fecha_nacimiento) return false;
              const birthDate = new Date(member.fecha_nacimiento);
              return birthDate.getMonth() + 1 === currentMonth;
            })
            .sort((a, b) => {
              const dateA = new Date(a.fecha_nacimiento);
              const dateB = new Date(b.fecha_nacimiento);
              return dateA.getDate() - dateB.getDate();
            }) || [];

        if (monthBirthdays.length === 0) {
          return {
            type: "general",
            message: `üéÇ **Cumplea√±os del mes:**\n\nüòä No hay cumplea√±os registrados para este mes.\n\nüìÖ **[Ver M√≥dulo de Cumplea√±os](/cumpleanos)**\n\n¬°Celebremos juntos! üôè‚ú®`,
          };
        }

        const monthNames = [
          "",
          "Enero",
          "Febrero",
          "Marzo",
          "Abril",
          "Mayo",
          "Junio",
          "Julio",
          "Agosto",
          "Septiembre",
          "Octubre",
          "Noviembre",
          "Diciembre",
        ];
        let mensaje = `üéÇ **Cumplea√±os de ${monthNames[currentMonth]}:** üéâ\n\n`;

        monthBirthdays.forEach((member) => {
          const birthDate = new Date(member.fecha_nacimiento);
          const day = birthDate.getDate();
          mensaje += `üìÖ ${day} - **${member.nombres} ${member.apellidos}**\n`;
        });

        mensaje += `\nüíù Total: ${monthBirthdays.length} cumplea√±ero${monthBirthdays.length > 1 ? "s" : ""}\n\nüìÖ **[Ver m√°s en M√≥dulo de Cumplea√±os](/cumpleanos)**\n\n¬°No olvides felicitar a tus hermanos en Cristo! üôè‚ú®`;

        return { type: "general", message: mensaje };
      }

      return {
        type: "general",
        message: `üéÇ **Informaci√≥n de cumplea√±os:**\n\nü§ñ Para consultar cumplea√±os puedes usar:\n\n‚Ä¢ "ARCANA cumplea√±os de hoy"\n‚Ä¢ "ARCANA cumplea√±os del mes"\n‚Ä¢ "ARCANA cumplea√±os de enero" (o cualquier mes)\n\nüìÖ **[Ir al M√≥dulo de Cumplea√±os](/cumpleanos)**\n\n¬°Celebremos la vida que Dios nos ha dado! üôè‚ú®`,
      };
    } catch (error) {
      console.error("Error consultando cumplea√±os:", error);
      return {
        type: "general",
        message: `üéÇ **Cumplea√±os:**\n\nü§ñ Hubo un error consultando los cumplea√±os. Por favor visita:\n\nüìÖ **[M√≥dulo de Cumplea√±os](/cumpleanos)**\n\n¬°Celebremos juntos! üôè‚ú®`,
      };
    }
  }

  private static handleBibleQuery(query: string): BotResponse {
    if (query.includes("d√≠a") || query.includes("hoy")) {
      return {
        type: "general",
        message: `üìñ **Vers√≠culo del d√≠a:**\n\nü§ñ Para el vers√≠culo diario y reflexiones espirituales, visita:\n\n‚ú® **[M√≥dulo Espiritual](/modulo-espiritual)**\n\nAll√≠ encontrar√°s:\n‚Ä¢ üìñ Vers√≠culo del d√≠a con reflexi√≥n\n‚Ä¢ üìö Historia de vers√≠culos anteriores\n‚Ä¢ üôè Meditaciones y estudios\n‚Ä¢ üí´ Inspiraci√≥n diaria\n\n"La palabra de Dios es viva y eficaz" - Hebreos 4:12 üôè‚ú®`,
      };
    }

    return {
      type: "general",
      message: `üìñ **Consultas b√≠blicas:**\n\nü§ñ Para vers√≠culos, reflexiones y estudios b√≠blicos:\n\n‚ú® **[Ir al M√≥dulo Espiritual](/modulo-espiritual)**\n\nPuedes consultar:\n‚Ä¢ "ARCANA vers√≠culo del d√≠a"\n‚Ä¢ "ARCANA cita b√≠blica sobre amor"\n‚Ä¢ "ARCANA biblia de hoy"\n\n"L√°mpara es a mis pies tu palabra, y lumbrera a mi camino" - Salmo 119:105 üôè‚ú®`,
    };
  }

  static async sendBotResponse(roomId: string, response: BotResponse): Promise<void> {
    try {
      console.log("ARCANA enviando respuesta:", response.message.substring(0, 50) + "...");

      // Usar user_id null para el bot
      const { error } = await supabase.from("chat_messages").insert([
        {
          room_id: roomId,
          user_id: null, // Bot messages will have null user_id
          message: response.message,
          is_bot: true,
          message_type: "text",
          is_deleted: false,
        },
      ]);

      if (error) {
        console.error("Error enviando respuesta del bot:", error);
        throw error;
      }

      console.log("ARCANA respuesta enviada exitosamente");
    } catch (error) {
      console.error("Error enviando respuesta del bot:", error);
    }
  }
}
