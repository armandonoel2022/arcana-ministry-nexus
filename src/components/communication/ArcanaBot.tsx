
import { supabase } from "@/integrations/supabase/client";

interface BotResponse {
  type: 'turnos' | 'ensayos' | 'canciones' | 'general';
  message: string;
}

export class ArcanaBot {
  private static readonly BOT_USER_ID = '00000000-0000-0000-0000-000000000001';
  
  static async processMessage(message: string, roomId: string, userId: string): Promise<BotResponse | null> {
    // Verificar si el mensaje menciona a ARCANA
    const mentionsBot = message.toLowerCase().includes('@arcana') || 
                       message.toLowerCase().startsWith('arcana:');
    
    if (!mentionsBot) return null;

    // Limpiar el mensaje removiendo la menci√≥n y signos de puntuaci√≥n
    const cleanMessage = message
      .replace(/@arcana\s*:?/gi, '')
      .replace(/^arcana\s*:?/gi, '')
      .replace(/^\s*:\s*/, '')
      .trim()
      .toLowerCase();

    console.log('ARCANA procesando mensaje limpio:', cleanMessage);

    // Analizar el tipo de consulta
    if (this.isTurnosQuery(cleanMessage)) {
      console.log('ARCANA detect√≥ consulta de turnos');
      return await this.handleTurnosQuery(userId);
    } else if (this.isEnsayosQuery(cleanMessage)) {
      console.log('ARCANA detect√≥ consulta de ensayos');
      return await this.handleEnsayosQuery();
    } else if (this.isCancionesQuery(cleanMessage)) {
      console.log('ARCANA detect√≥ consulta de canciones');
      return await this.handleCancionesQuery(cleanMessage);
    } else {
      console.log('ARCANA detect√≥ consulta general');
      return this.handleGeneralQuery(cleanMessage);
    }
  }

  private static isTurnosQuery(message: string): boolean {
    const turnosKeywords = ['turno', 'turnos', 'cantar', 'cuando me toca', 'pr√≥ximo turno', 'agenda', 'toca'];
    return turnosKeywords.some(keyword => message.includes(keyword));
  }

  private static isEnsayosQuery(message: string): boolean {
    const ensayosKeywords = ['ensayo', 'ensayos', 'pr√°ctica', 'practicas', 'rehearsal'];
    return ensayosKeywords.some(keyword => message.includes(keyword));
  }

  private static isCancionesQuery(message: string): boolean {
    const cancionesKeywords = ['canci√≥n', 'cancion', 'canciones', 'buscar', 'repertorio', 'm√∫sica', 'song'];
    return cancionesKeywords.some(keyword => message.includes(keyword));
  }

  private static async handleTurnosQuery(userId: string): Promise<BotResponse> {
    try {
      console.log('ARCANA consultando turnos para usuario:', userId);
      
      // Buscar informaci√≥n del usuario en perfiles
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('full_name')
        .eq('id', userId)
        .single();

      if (profileError || !profile) {
        console.log('No se encontr√≥ perfil, buscando en tabla members');
        
        // Buscar en la tabla members usando el email del usuario autenticado
        const { data: { user }, error: userError } = await supabase.auth.getUser();
        
        if (userError || !user) {
          return {
            type: 'turnos',
            message: 'ü§ñ No pude identificar tu usuario. Aseg√∫rate de estar autenticado correctamente.'
          };
        }

        // Buscar en members por email
        const { data: member, error: memberError } = await supabase
          .from('members')
          .select('nombres, apellidos')
          .eq('email', user.email)
          .single();

        if (memberError || !member) {
          return {
            type: 'turnos',
            message: 'ü§ñ No encontr√© tu informaci√≥n en el sistema de integrantes. Contacta a tu l√≠der para actualizar tus datos.'
          };
        }

        // Usar el nombre completo del member
        const fullName = `${member.nombres} ${member.apellidos}`;
        return await this.searchUserInServices(fullName);
      }

      // Usar el nombre del perfil
      return await this.searchUserInServices(profile.full_name);

    } catch (error) {
      console.error('Error consultando turnos:', error);
      return {
        type: 'turnos',
        message: 'ü§ñ Disculpa, hubo un error consultando tus turnos. Intenta nuevamente o consulta directamente la agenda ministerial.'
      };
    }
  }

  private static async searchUserInServices(fullName: string): Promise<BotResponse> {
    try {
      console.log('Buscando servicios para:', fullName);

      // Buscar pr√≥ximos eventos en la agenda ministerial
      const today = new Date().toISOString().split('T')[0];
      const { data: eventos, error: eventosError } = await supabase
        .from('services')
        .select('*')
        .gte('service_date', today)
        .order('service_date', { ascending: true })
        .limit(10);

      if (eventosError) {
        console.error('Error consultando eventos:', eventosError);
        return {
          type: 'turnos',
          message: 'ü§ñ Hubo un error consultando la agenda ministerial. Intenta nuevamente.'
        };
      }

      console.log('Eventos encontrados:', eventos?.length || 0);

      if (!eventos || eventos.length === 0) {
        return {
          type: 'turnos',
          message: 'ü§ñ No hay servicios pr√≥ximos programados en la agenda ministerial.'
        };
      }

      // Buscar si el usuario est√° mencionado en alg√∫n evento
      const eventosConUsuario = eventos.filter(evento => {
        const searchableText = [
          evento.leader,
          evento.description,
          evento.notes,
          evento.title
        ].join(' ').toLowerCase();
        
        const nombresParts = fullName.toLowerCase().split(' ');
        return nombresParts.some(part => 
          part.length > 2 && searchableText.includes(part)
        );
      });

      console.log('Eventos con usuario:', eventosConUsuario.length);

      if (eventosConUsuario.length === 0) {
        return {
          type: 'turnos',
          message: `ü§ñ Hola ${fullName}! No tienes turnos programados en los pr√≥ximos servicios. Consulta con tu l√≠der de grupo para m√°s informaci√≥n.`
        };
      }

      const proximoEvento = eventosConUsuario[0];
      const fecha = new Date(proximoEvento.service_date).toLocaleDateString('es-ES', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });

      return {
        type: 'turnos',
        message: `üéµ ¬°Hola ${fullName}! Tu pr√≥ximo turno es:\n\nüìÖ **${proximoEvento.title}**\nüóìÔ∏è ${fecha}\nüìç ${proximoEvento.location || 'Ubicaci√≥n por confirmar'}\n\n¬°Prep√°rate para alabar al Se√±or! üôè`
      };

    } catch (error) {
      console.error('Error buscando en servicios:', error);
      return {
        type: 'turnos',
        message: 'ü§ñ Disculpa, hubo un error consultando tus turnos. Intenta nuevamente o consulta directamente la agenda ministerial.'
      };
    }
  }

  private static async handleEnsayosQuery(): Promise<BotResponse> {
    try {
      console.log('ARCANA consultando ensayos');
      
      const today = new Date().toISOString().split('T')[0];
      const { data: ensayos, error } = await supabase
        .from('services')
        .select('*')
        .gte('service_date', today)
        .ilike('title', '%ensayo%')
        .order('service_date', { ascending: true })
        .limit(3);

      if (error) {
        console.error('Error consultando ensayos:', error);
        return {
          type: 'ensayos',
          message: 'ü§ñ Disculpa, hubo un error consultando los ensayos. Revisa la agenda ministerial directamente.'
        };
      }

      console.log('Ensayos encontrados:', ensayos?.length || 0);

      if (!ensayos || ensayos.length === 0) {
        return {
          type: 'ensayos',
          message: 'ü§ñ No hay ensayos programados pr√≥ximamente. Mantente atento a los anuncios del ministerio.'
        };
      }

      let mensaje = 'üéµ **Pr√≥ximos Ensayos:**\n\n';
      ensayos.forEach((ensayo, index) => {
        const fecha = new Date(ensayo.service_date).toLocaleDateString('es-ES', {
          weekday: 'long',
          day: 'numeric',
          month: 'long'
        });
        mensaje += `${index + 1}. **${ensayo.title}**\nüìÖ ${fecha}\nüìç ${ensayo.location || 'Ubicaci√≥n por confirmar'}\n\n`;
      });

      mensaje += '¬°No faltes! La alabanza requiere preparaci√≥n. üôè';

      return {
        type: 'ensayos',
        message: mensaje
      };

    } catch (error) {
      console.error('Error consultando ensayos:', error);
      return {
        type: 'ensayos',
        message: 'ü§ñ Disculpa, hubo un error consultando los ensayos. Revisa la agenda ministerial directamente.'
      };
    }
  }

  private static async handleCancionesQuery(query: string): Promise<BotResponse> {
    try {
      console.log('ARCANA consultando canciones con query:', query);
      
      // Extraer t√©rminos de b√∫squeda
      const searchTerms = query
        .replace(/canci√≥n|cancion|canciones|buscar|repertorio|m√∫sica|song/gi, '')
        .trim();

      if (!searchTerms) {
        return {
          type: 'canciones',
          message: 'ü§ñ Para buscar canciones, especifica el nombre o categor√≠a. Ejemplo: "@ARCANA buscar alabanza" o "@ARCANA canci√≥n esp√≠ritu santo"'
        };
      }

      const { data: canciones, error } = await supabase
        .from('songs')
        .select('*')
        .or(`title.ilike.%${searchTerms}%,artist.ilike.%${searchTerms}%,genre.ilike.%${searchTerms}%`)
        .limit(5);

      if (error) {
        console.error('Error buscando canciones:', error);
        return {
          type: 'canciones',
          message: 'ü§ñ Disculpa, hubo un error buscando canciones. Consulta directamente el repertorio musical.'
        };
      }

      console.log('Canciones encontradas:', canciones?.length || 0);

      if (!canciones || canciones.length === 0) {
        return {
          type: 'canciones',
          message: `ü§ñ No encontr√© canciones con "${searchTerms}". Puedes buscar por t√≠tulo, artista o g√©nero en nuestro repertorio.`
        };
      }

      let mensaje = `üéµ **Encontr√© ${canciones.length} canci√≥n(es) con "${searchTerms}":**\n\n`;
      canciones.forEach((cancion, index) => {
        mensaje += `${index + 1}. **${cancion.title}**\n`;
        if (cancion.artist) mensaje += `üé§ ${cancion.artist}\n`;
        if (cancion.genre) mensaje += `üéº ${cancion.genre}\n`;
        if (cancion.key_signature) mensaje += `üéπ Tono: ${cancion.key_signature}\n`;
        mensaje += '\n';
      });

      return {
        type: 'canciones',
        message: mensaje
      };

    } catch (error) {
      console.error('Error buscando canciones:', error);
      return {
        type: 'canciones',
        message: 'ü§ñ Disculpa, hubo un error buscando canciones. Consulta directamente el repertorio musical.'
      };
    }
  }

  private static handleGeneralQuery(query: string): BotResponse {
    console.log('ARCANA manejando consulta general:', query);
    
    // Respuestas predefinidas para consultas generales relacionadas con el ministerio
    const responses = {
      'valores': 'ü§ñ Nuestros valores fundamentales son: **Fe, Adoraci√≥n, Comunidad, Servicio y Excelencia**. Cada integrante del ministerio debe reflejar estos valores en su vida y servicio.',
      'horarios': 'ü§ñ Los horarios regulares son: Ensayos los mi√©rcoles 7:00 PM, Servicio domingo 9:00 AM. Para horarios espec√≠ficos, consulta la agenda ministerial.',
      'contacto': 'ü§ñ Para contactar a los l√≠deres del ministerio, puedes usar este sistema de comunicaci√≥n o consultar en la secci√≥n de Integrantes.',
      'ayuda': 'ü§ñ Puedo ayudarte con:\n‚Ä¢ Consultar turnos: "@ARCANA cu√°ndo me toca cantar"\n‚Ä¢ Ver ensayos: "@ARCANA pr√≥ximos ensayos"\n‚Ä¢ Buscar canciones: "@ARCANA buscar [nombre/g√©nero]"\n‚Ä¢ Informaci√≥n general del ministerio'
    };

    // Buscar coincidencias en las consultas
    for (const [key, response] of Object.entries(responses)) {
      if (query.includes(key)) {
        console.log('ARCANA encontr√≥ respuesta para:', key);
        return { type: 'general', message: response };
      }
    }

    // Respuesta por defecto
    console.log('ARCANA usando respuesta por defecto');
    return {
      type: 'general',
      message: 'ü§ñ Hola! Soy ARCANA, el asistente del Ministerio ADN. Puedo ayudarte con consultas sobre turnos, ensayos y canciones. Escribe "@ARCANA ayuda" para ver todas mis funciones.'
    };
  }

  static async sendBotResponse(roomId: string, response: BotResponse): Promise<void> {
    try {
      console.log('ARCANA enviando respuesta:', response.message.substring(0, 50) + '...');
      
      // Enviar mensaje del bot sin user_id (ya que es nullable ahora)
      const { data, error } = await supabase
        .from('chat_messages')
        .insert({
          room_id: roomId,
          user_id: null, // Bot no necesita user_id
          message: response.message,
          is_bot: true
        });

      if (error) {
        console.error('Error enviando respuesta del bot:', error);
        throw error;
      }

      console.log('ARCANA respuesta enviada exitosamente');
    } catch (error) {
      console.error('Error enviando respuesta del bot:', error);
    }
  }
}
